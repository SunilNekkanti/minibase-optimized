#LyX 1.4.2 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Section
HeapFile
\end_layout

\begin_layout Subsection
Descripción general
\end_layout

\begin_layout Standard
Es un archivo desordenado.
 Cada registro en el archivo tiene un rid único y cada página en el archivo
 es del mismo tamaño.
 El rid es una concatenación del id de la página donde está ubicado el registro
 y el slot en donde se encuentra ese registro dentro de dicha página.
 Además permite la creación de un scan para poder recorrer todos los registros
 de un archivo heap, repitiendo solicitudes para el próximo registro.
 También se debe mantener un registro de las páginas que tienen espacio
 libre para implementar la inserción eficientemente.
\end_layout

\begin_layout Subsubsection
Diseño interno-estructuras
\end_layout

\begin_layout Standard
La primer página del directorio de páginas, es la página de cabecera(header
 page ) para todo el heapfile.
 Puede recordar donde está ubicada la primer página, se mantiene por medio
 de DM un cojunto de tuplas 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textless
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

nom_BD, 1er_pag_del_dir_de_datos
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textgreater
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Heapfile mantiene una estructura de información sobre las páginas de datos
 llamada directorio de páginas Esta estructura está implementada como una
 lista doblemente enlazada compuesta por páginas del tipo HFPage.
 Cada entrada en una página del directorio de páginas, contiene información
 compatible con DataPageInfo.
 Es decir: id de la página, espacio libre y la cantidad de registros que
 esa página contiene.
 Cada una de estas entradas, apunta a una página de datos( id de la página
 ), la cual contiene los registros.
 Las páginas de datos del HeapFile también son del tipo HFPage, están implementa
das como páginas con slots.
 Cada una de éstas páginas contiene los slots al inicio, con información
 sobre los registros( longitud, offset, tipo, étc ).
 Registros al final y espacio libre en el medio ( si es que hay ).
\end_layout

\begin_layout Subsection
Clases principales y sus protocolos principales
\end_layout

\begin_layout Subsubsection
Heapfile
\end_layout

\begin_layout Standard

\series bold
Atributos miembro
\series default
 --------------
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

PageId firstDirPageId;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 número de página de la página encabezado ( header page )
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

int ftype;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private boolean filedeleted;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private String fileName;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private static int tempfilecount = 0;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 Número de archivo temporal.
 Lo usa el constructor cuando no se pasa un nombre.
\end_layout

\begin_layout Standard

\series bold
Métodos relevantes
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private HFPage newDatapage(DataPageInfo dpinfop)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obtiene una nueva página mediante el BM( éste le pide a DM que cree una
 página y luego la pone en el buffer pool ) e inicializa dpinfop para esa
 página
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private boolean findDataPage( RID rid, PageId dirPageId, HFPage dirpage,
 PageId dataPageId, HFPage datapage, RID rpDataPageRid)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Devuelve la página del directorio, la página de datos y el rid que cumplen
 con lo siguiente:
\end_layout

\begin_layout Standard
la página del directorio apunta a la página de datos en dónde se encuentra
 el rid pasado por parámetro.
 Las dos págianas pinchadas( pinned )
\end_layout

\begin_layout Standard
y true si se encontró el rid, false caso contrario.
\end_layout

\begin_layout Standard
Como funciona:
\end_layout

\begin_layout Enumerate
Obtiene la primer página del directorio ( _firstDirPageId ) por medio del
 BM ( pin )
\end_layout

\begin_layout Enumerate
Empieza a recorrer las páginas del directorio a partir de currentDirPage.
\end_layout

\begin_layout Enumerate
Por cada registro de la página de directorio actual( recordemos que estos
 registros son del tipo DataPageInfo) lo convierte en tupla ( método getRecord
 de HFPage ) y luego obtiene el id de la página que figura en DataPageInfo.
\end_layout

\begin_layout Enumerate
Llama a BM para obtener esa página.
\end_layout

\begin_layout Enumerate
Si el rid pasado x parámetro coincide con el id de esta página( recordemos
 que el rid es una concatenación del id de página y el slot en dónde se
 encuentra el registro ) 
\end_layout

\begin_layout Standard
Devuelvo en dirpage y dirPageId de la página del directorio actual.
\end_layout

\begin_layout Standard
Devuelvo en datapage y dataPageId de la página de datos actual.
\end_layout

\begin_layout Standard
Y en rpDataPageRid el rid del registro.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public Heapfile(String name)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si name es null, toma como _fileName "tempHeapFile" + "user.name"( nobre
 de usuario x defecto ) y le concatena un número único (tempfilecount) para
 que este nombre no se repita.
\end_layout

\begin_layout Standard
Si se llamó con name != null, hace: obtiene el id de la primer página del
 directorio, llamando a get_file_entry del DM.
 ( recordemos que se mantiene una tupla 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textless
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

nom_BD, 1er_pag_del_dir_de_datos
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textgreater
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 por cada archivo de base de datos
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textgreater
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si no devuelve nada( nombre inválido ), o se llamó con name = null
\end_layout

\begin_layout Standard
Se crea _firstDirPageId mediante BM.
\end_layout

\begin_layout Standard
Y se agregar la tupla
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textless
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

_fileName, _firstDirPageId
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textgreater
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 mediante DM
\end_layout

\begin_layout Standard
Se guarda ( mediante el método unpin de BM ) _firstDirPageId con el Id de
 obtenido anteriormente y con su referencia a páginas anterior y posterior
 en null.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public int getRecCnt()
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Devuelve la cantidad de registros.
\end_layout

\begin_layout Standard
Por cada página del directorio, comenzando por _firstDirPageId
\end_layout

\begin_layout Standard
Obtiene la página por medio del BM ( la pincha )
\end_layout

\begin_layout Standard
Cada registro en esa página (DataPageInfo), informa la cantidad de registros
 de cada una de las páginas de datos( dpinfo.recct )
\end_layout

\begin_layout Standard
Simplemente va sumando esas cantidades.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public RID insertRecord(byte[] recPtr)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Busca espacio disponible:
\end_layout

\begin_layout Standard
Obtiene cada página del directorio llamando al BM( pin ), comenzando por
 la primera (_firstDirPageId)
\end_layout

\begin_layout Standard
Busca por cada DataPageInfo en la página de directorio actual uno cuyo espacio
 disponible sea 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textgreater
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

= que la longitud del registro a insertar.
\end_layout

\begin_layout Standard
Si no encontró espacio disponible:
\end_layout

\begin_layout Standard
Se fija si la página de directorio actual tiene espacio para alojar un nuevo
 registro DataPageInfo.
\end_layout

\begin_layout Standard
Si no hay lugar, busca alguna página de directorio que sí tenga.
 ( recorriendo las páginas de directorios, recordemos que esta estructura
 es una lista doblemente enlazada de HFPage )
\end_layout

\begin_layout Standard
Si ninguna tiene, crea una nueva página de directorio y genera los enlaces
 correspondientes con la lista.
\end_layout

\begin_layout Standard
Pide al BM que aloje una nueva página de datos.
\end_layout

\begin_layout Standard
Genera un DataPageInfo para esa página.
\end_layout

\begin_layout Standard
Guarda en la página de datos el registro mediante BM( unpin )
\end_layout

\begin_layout Standard
Modifica los valores de DatePageInfo para la página de directorio mediante
 BM( unpin )
\end_layout

\begin_layout Standard
Si encontró espacio disponible:
\end_layout

\begin_layout Standard
Obtiene la página de datos que indica el DataPageInfo mediante el BM( pinPage
 )
\end_layout

\begin_layout Standard
Inserta el registro, persiste esa página mediante BM( unpin )
\end_layout

\begin_layout Standard
Modifica los valores de DatePageInfo para la página de directorio mediante
 BM( unpin )
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public boolean deleteRecord(RID rid)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Borra un registro dado su rid.
\end_layout

\begin_layout Standard
Busca el registro en la BD.
 Si no lo encontró, devuelve false
\end_layout

\begin_layout Standard
Elimina el registro de la página de datos
\end_layout

\begin_layout Standard
Actualiza el DataPageInfo en la página del directorio
\end_layout

\begin_layout Standard
Si la cantidad de registros que tiene el DataPageInfo ahora es 0:
\end_layout

\begin_layout Standard
Elimina la pagina de datos( BM-
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textgreater
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

freePage )
\end_layout

\begin_layout Standard
Elimina el registro de la pagina de directorio.
\end_layout

\begin_layout Standard
Si la pagina de directorio no es la cabecera y esta vacia, se borra.
\end_layout

\begin_layout Standard
Se actualizan los enlaces de la lista de páginas de directorio.
\end_layout

\begin_layout Standard
Devuelve true si pudo borrarlo.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public boolean updateRecord(RID rid, Tuple newtuple)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Modifica el registro.
 Se asume que el registro nuevo debe tener el mismo tamaño que el que se
 quiere modificar.
\end_layout

\begin_layout Standard
rid: registro a modificar
\end_layout

\begin_layout Standard
newtuple: nuevo valor
\end_layout

\begin_layout Standard
Busca el registro en la BD.
 Si no lo encontró, devuelve false
\end_layout

\begin_layout Standard
Modifica el registro de la página de datos
\end_layout

\begin_layout Standard
Saca las páginas( de datos y de directorio) de memoria principal.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public Tuple getRecord(RID rid)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lee el registro de dado un rid
\end_layout

\begin_layout Standard
Busca el registro en la BD.
 Si no lo encontró, devuelve null
\end_layout

\begin_layout Standard
Lee el registro de la página de datos
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public Scan openScan()
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inicializa un scan secuencial
\end_layout

\begin_layout Standard
------------------------------------------
\end_layout

\begin_layout Standard
Borra el archivo de la BD
\end_layout

\begin_layout Standard
Por cada página del directorio
\end_layout

\begin_layout Standard
Borra todas las páginas de datos contenidas en cada DataPageInfo de esa
 página del directorio
\end_layout

\begin_layout Standard
Borra la página del directorio
\end_layout

\begin_layout Standard
Borra la entrada para ese archivo; la tupla
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textless
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

_fileName, _firstDirPageId
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textgreater
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

 pinPage->BM.pinPage
\end_layout

\begin_layout Standard
unpinPage->BM.unpinPage
\end_layout

\begin_layout Standard
freePage->BM.freePage
\end_layout

\begin_layout Standard
newPage->BM.newPage
\end_layout

\begin_layout Standard
getfileentry->DM.getfileentry
\end_layout

\begin_layout Standard
addfileentry->DM.addfileentry
\end_layout

\begin_layout Standard
deletefileentry->DM.deletefileentry
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
DataPageInfo
\end_layout

\begin_layout Standard
Esta clase se utiliza para guardar información sobre las páginas de datos
 ( las que realmente contienen los registros ).
 Esta información se guarda en las páginas de directorio( que como dijimos
 anteriormente, es una lista doblemente enlazada ).
 Entonces, una página de directorio almacena información sobre muchas páginas
 de datos como una entrada DataPageInfo.
 Esta información es la siguiente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

int availspace;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 Espacio disponible
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

int recct;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 Indica la cantidad de registros en
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

PageId pageId = new PageId();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 Id de HFPage
\end_layout

\begin_layout Subsubsection
HFPage
\end_layout

\begin_layout Standard
El diseño asume que los registros se compactan cuando se realiza un borrado.
\end_layout

\begin_layout Standard
Se utilizan slots al principio que indican la informacion del registro(
 longitud, offset, tipo, étc ).
 Los registros se guardan al final.
\end_layout

\begin_layout Standard
Cuando se borra un registro, se elimina el registro físicamente y en la
 información del slot, se establece su tamaño en un valor negativo.
 Por lo tanto, el número de slots en uso no se modifica.
\end_layout

\begin_layout Standard

\series bold
Atributos miembro
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private short slotCnt;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 número de slots en uso
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private short usedPtr;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 offset del primer byte usado por registros en el arreglo de bytes(data)
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private short freeSpace;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 número de bytes libres en data[]
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private short type;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 an arbitrary value used by subclasses as needed
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private PageId prevPage = new PageId();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 referencia a la página anterior
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private PageId nextPage = new PageId();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 referencia a la próxima página
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

protected PageId curPage = new PageId();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 número de esta página.
\end_layout

\begin_layout Standard

\series bold
Métodos relevantes
\series default
 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public void openHFpage(Page apage)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Establece: 0 slots en uso, pageNo como página actual, pág anterior y próxima
 como INVALID_PAGE, espacio libre: MAX_SPACE - DPFIXED, USED_PTR =MAX_SPACE
\end_layout

\begin_layout Standard
Los siguietnes métodos obtienen y guardan los atributos de la clase fisicamente
 en la pagina ( el arreglo de bytes data )
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

getHFpageArray()
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obtiene los valores del arreglo de bytes( data ) y los guarda en los atributos
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

 public void dumpPage()
\end_layout

\begin_layout Standard
public PageId getPrevPage()
\end_layout

\begin_layout Standard
public void setPrevPage(PageId pageNo)
\end_layout

\begin_layout Standard
public PageId getNextPage()
\end_layout

\begin_layout Standard
public void setNextPage(PageId pageNo)
\end_layout

\begin_layout Standard
public PageId getCurPage()
\end_layout

\begin_layout Standard
public void setCurPage(PageId pageNo)
\end_layout

\begin_layout Standard
public short getType()
\end_layout

\begin_layout Standard
public void setType(short valtype)
\end_layout

\begin_layout Standard
public short getSlotCnt()
\end_layout

\begin_layout Standard
public void setSlot(int slotno, int length, int offset)
\end_layout

\begin_layout Standard
public short getSlotLength(int slotno)
\end_layout

\begin_layout Standard
public short getSlotOffset(int slotno)
\end_layout

\begin_layout Standard
public int availablespace()
\end_layout

\begin_layout Standard
public boolean empty() 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 Dice si la página está vacía.
\end_layout

\begin_layout Standard
Para esto se va fijando en cada uno de los slots si está vacío.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public RID insertRecord ( byte [] record)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inserta un registro nuevo en la página, devuelve el rid de este registro
\end_layout

\begin_layout Enumerate
Se fija si hay lugar disponible para el registro nuevo, comparando el tamaño
 de este registro con el valor de FREE_SPACE( guardada en la página )
\end_layout

\begin_deeper
\begin_layout Standard
Si no hay lugar devuelve null
\end_layout

\end_deeper
\begin_layout Enumerate
Busca un slot marcado como borrado ( longitud negativa )
\end_layout

\begin_deeper
\begin_layout Standard
Si lo encuentra, le resta a FREE_SPACE el tamaño del registro.
\end_layout

\begin_layout Standard
Si no, usa uno nuevo; le resta a FREE_SPACE el tamaño del registro y además
 aumenta la cantidad de slots en uso (SLOT_CNT ) 
\end_layout

\end_deeper
\begin_layout Standard
Modifica la dirección ( USED_PTR -= long del registro.
 )
\end_layout

\begin_layout Standard
Inserta la información del slot en la página: numero de slot, longitud del
 registro, dirección ( USED_PTR )
\end_layout

\begin_layout Standard
Inserta el registro en la página
\end_layout

\begin_layout Standard
Arma el rid con el número de slot y id de la página
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public void deleteRecord ( RID rid )
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Elimina el registro especificado por su rid
\end_layout

\begin_layout Standard
Obtiene el número de slot por su rid.
\end_layout

\begin_layout Standard
Obtiene el offset, usedPtr y tamaño
\end_layout

\begin_layout Standard
Elimina el registro ( hace un shift hacia la derecha, de todo lo anterior
 a ese registro )
\end_layout

\begin_layout Standard
Actualiza los offsets de todos los registros anteriores a éste.
\end_layout

\begin_layout Standard
Actualiza la ubicación de usedPtr
\end_layout

\begin_layout Standard
Incrementa el espacio libre de la página.
\end_layout

\begin_layout Standard
Marca el slot como libre
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public RID firstRecord()
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Devuelve el RID del primer registro de la página o null si no hay ningún
 registro en la página.
\end_layout

\begin_layout Standard
Busca el primer slot que no esté vacío.
\end_layout

\begin_layout Standard
Arma el rid con el id de la página y el número de slot.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public RID nextRecord (RID curRid)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obtiene el rid del próximo registro de la página o null si no hay otro.
\end_layout

\begin_layout Standard
Idem anterior, con la diferencia que:
\end_layout

\begin_layout Standard
Obtiene el slot de este registro por medio del rid.
\end_layout

\begin_layout Standard
Y comienza a buscar a partir de ese slot, el próximo válido.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public Tuple getRecord ( RID rid )
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Copia el arreglo de bytes(data) del registro dado un RID en una tupla.
\end_layout

\begin_layout Subsubsection
Scan
\end_layout

\begin_layout Standard

\series bold
Atributos miembro
\series default
 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private Heapfile hf;
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

El heapfile
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private PageId dirpageId = new PageId();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

Id de la página actual del directorio (HFPage)
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private HFPage dirpage = new HFPage();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

Pagina actual del directorio (HFPage)
\end_layout

\begin_layout Standard
(la pág.
 apuntada por dirpageId )
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private RID datapageRid = new RID();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

rid que apunta al DataPageInfo de la página del directorio
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private PageId datapageId = new PageId();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

página id en donde está contenido el rid
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private HFPage datapage = new HFPage();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

página en donde está contenido el rid
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private RID userrid = new RID();
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

rid contenido en la actual pagina de datos( datapage )
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private boolean nextUserStatus; 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

/** Status of next user status */
\end_layout

\begin_layout Standard

\series bold
Métodos relevantes
\series default
 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public Scan(Heapfile hf)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inicializa el miembro privado hf con el hf pasado por parametro.
\end_layout

\begin_layout Standard
Establece el id de dirPageId como el id de la primer página del directorio
 de hf.
\end_layout

\begin_layout Standard
Obtiene esta página mediante el BM y la guarda en dirPage
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public Tuple getNext(RID rid)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Devuelve el proximo registro.
\end_layout

\begin_layout Standard
Si no hay un proximo registro en esta pagina (nextUserStatus = false )
\end_layout

\begin_layout Standard
obtiene la proxima pagina
\end_layout

\begin_layout Standard
Obtiene la tupla correspondiente y guarda en userrid el proximo registro.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public boolean position(RID rid)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ubica el cursor ( userrid ) en el registro pasado por parametro.
\end_layout

\begin_layout Standard
Se fija si la pagina de datos actual coincide con el id de la pag.
 del rid pasado x parametro.
\end_layout

\begin_layout Standard
Si no, busca esa pagina a partir de la primera apuntada por la primer pagina
 del directorio.
 Utiliza el metodo ( nextDataPage() )
\end_layout

\begin_layout Standard
Una vez encontrada, comienza a buscar los registros de esa pagina hasta
 encontrar el que coincida con el pasado por parametro.
 Utiliza el metodo ( peekNext )
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

public void closescan()
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le indica al BM que desaloje la pagina de directorio y la de datos.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private boolean firstDataPage()
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Establece dirpageId como el id de la primer página de directorios del HF.
\end_layout

\begin_layout Standard
Obtiene esta página a partir del BM y la guarda en dirpage
\end_layout

\begin_layout Standard
nextUserStatus = true;
\end_layout

\begin_layout Standard
Devuelve true si todo estuvo bien
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private boolean nextDataPage()
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obtiene la próxima página de datos apuntada por datapageRid.
\end_layout

\begin_layout Standard
Si la pagina de datos actual es nula y el dataPageId es válido, obtiene
 y devuelve esta página.
\end_layout

\begin_layout Standard
Obtiene el siguiente registro a datapageRid de la pagina de directorio,
 si es nulo, busca el primer registro de la proxima pag.
 de directorio si hay.
\end_layout

\begin_layout Standard
A partir de este registro, obtiene la pagina de datos.
\end_layout

\begin_layout Standard
Guarda los valores nuevos de todos los atributos.
\end_layout

\begin_layout Standard
Devuelve true si estuvo todo bien
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

private boolean peekNext(RID rid)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Guarda en rid el proximo registro ( establecido en el miembro userrid )
\end_layout

\begin_layout Subsection
Interacción con otros componentes
\end_layout

\begin_layout Subsection
Ejemplo de uso
\end_layout

\begin_layout Standard
Si se justifica
\end_layout

\begin_layout Subsubsection
Diagramas de secuencia
\end_layout

\begin_layout Subsubsection
Script de ejemplo
\end_layout

\begin_layout Subsection
Evaluación del componente (opinión acerca de la calidad de código, diseño,
 etc.)
\end_layout

\begin_layout Standard

\newpage
 
\end_layout

\end_body
\end_document
