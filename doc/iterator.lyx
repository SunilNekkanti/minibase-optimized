#LyX 1.4.2 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\language spanish
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1cm
\topmargin 3cm
\rightmargin 1cm
\bottommargin 3cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Section
Iterator
\end_layout

\begin_layout Subsection
Descripción general
\end_layout

\begin_layout Standard
La componente iterator es el punto de acceso a las tablas y a sus registros.
 Como tal ofrece, tambien, las operaciones basicas sobre tablas, como join,
 proyeccion y seleccion.
 La iterfaz usada, como dice el nombre, es la de un iterador, el cual se
 inicializa en base a otros iteradores o heapfiles y despues se va accediendo
 elemento por elemento en un orden definido por el iterador.
\end_layout

\begin_layout Subsection
Clases principales y sus protocolos principales
\end_layout

\begin_layout Standard
La interfaz de iterador abstaida por la clase 
\emph on
Iterator
\emph default
 de la cual heredan todas las clases que ofrecen acceso a un conjunto de
 registros.
\end_layout

\begin_layout Subsubsection
Scan
\end_layout

\begin_layout Standard
Scan se decidió tratarla en esta sección, por más que se encuentre en el
 paquete de 
\emph on
Heapfile
\emph default
 y no herede de 
\emph on
Iterator
\emph default
, porque su funcionalidad es la de un iterador e implementa la interfaz
 de 
\emph on
Iterator.
\end_layout

\begin_layout Standard
Este iterador se ocupa de iterar sobre todos los registros de un 
\emph on
Heapfile
\emph default
, sin ninguna condición.
\end_layout

\begin_layout Subsubsection
FileScan
\end_layout

\begin_layout Standard

\emph on
FileScan
\emph default
 es simplemente un wrapper de la clase 
\emph on
Scan,
\emph default
 o sea que no ofrece casi funcionalidad adicional a Scan salvo por algunas
 que se deberian abstraer a otros iteradores.
\end_layout

\begin_layout Standard
La funcionalidad adicional que ofrece es la de realizar un selección sobre
 el 
\emph on
Scan
\emph default
 y realizar una proyeccion.
 Estas dos se deberian implementar utilizando iteradores.
 Notar que si la condición de seleccion es nula, se itera sobre todos los
 registros del 
\emph on
Heapfile
\emph default
.
\end_layout

\begin_layout Standard
La evaluación de la condicion de seleccion y la proyeccion son proveidas
 por las clases 
\emph on
PredEval
\emph default
 y 
\emph on
Projection
\emph default
, respectivamente.
\end_layout

\begin_layout Subsubsection
NestedLoopsJoins
\end_layout

\begin_layout Standard

\emph on
NestedLoopsJoins
\emph default
 permite realizar un join entre un 
\emph on
Iterator
\emph default
 y un 
\emph on
Heapfile
\emph default
 (aunque seria más correcto que fuera entre dos 
\emph on
Iterator
\emph default
).
 El algoritmo utilizado es el más simple de los implementados, es un doble
 ciclo donde, en el cuerpo del ciclo interno, se verfican la condicion de
 join.
 Tambien se puede realizar una proyeccion en la salida.
\end_layout

\begin_layout Subsubsection
SortMerge
\end_layout

\begin_layout Standard

\emph on
SortMerge
\emph default
 realiza un join utilizando el algoritmo de merge sort.
 Como 
\emph on
NestedLoopsJoins
\emph default
 permite realizar una proyeccion en la salida.
\end_layout

\begin_layout Standard
Para realizar el sort utiliza varias clases auxiliares, como 
\emph on
Sort
\emph default
 (que se encarga de iterar de una manera ordenada un 
\emph on
Heapfile
\emph default
) y 
\emph on
IoBuf
\emph default
 (un simple wrapper para el 
\emph on
BufMgr
\emph default
 para que trabaje con tuplas).
\end_layout

\begin_layout Standard
Esta implementacion no elimina los registros duplicados.
\end_layout

\begin_layout Subsubsection
Sort
\end_layout

\begin_layout Standard

\emph on
Sort
\emph default
 permite iterar de una manera ordenada la salida de otro iterador.
 Utiliza un arbol binario ordenado para establecer el orden de la salida.
\end_layout

\begin_layout Subsection
Interacción con otros componentes
\end_layout

\begin_layout Standard
Esta clase es el punto de acceso principal a los registros.
 En general con esta clase es con la cual se realiza toda interaccion con
 la base de datos (salvo la modificacion de las tablas o de los registros).
\end_layout

\begin_layout Standard
El paquete utiliza las clases 
\emph on
OBuf
\emph default
 e 
\emph on
IoBuf
\emph default
 para interactuar con el 
\emph on
BufMgr
\emph default
.
 Estas clases simplemente permiten a los iteradores comunicarse con el BufMgr
 usando tuplas.
 Con lo cual deberian estar definidas en en el paquete de 
\emph on
BufMgr
\emph default
 para maximizar la modularidad del sistema.
 Esto se debe a que, como esta implementado actualmente, el paquete 
\emph on
Iterator
\emph default
 utiliza directamente funcionalidad del 
\emph on
BufMgr
\emph default
 que no deberia ser necesaria para las tareas que realiza.
\end_layout

\begin_layout Standard
Respecto a la utilizacion de las otras componentes, 
\emph on
Iterator
\emph default
 se limita a utilizar 
\emph on
Scan
\emph default
 del paquete 
\emph on
Heapfile
\emph default
 para la interaccion con las tablas.
 Esta clase deberia heredar de Iterator para reforzar los protocolos.
\end_layout

\begin_layout Subsection
Ejemplo de uso
\end_layout

\begin_layout Standard
La utilización de un iterador es bastante simple.
 Alcanza con inicializarlo con los parametros necesarios (sobre que iteradores
 o realaciones se accede y cuales son sus atributos, los atributos de salida
 y las condiciones de selección).
 Por ejemplo para FileScan tendriamos:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

FileScan scan = new FileScan ("relacion.in",atributos,tamañosAtributos, proyeccio
n,condiciones);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para el acceso iterativo a las tuplas se utiliza simplemente el get_next:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

Tuple tuple = null;
\end_layout

\begin_layout Standard

while((tuple = scan.get_next()) != null){
\end_layout

\begin_layout Standard

//Hacer algo con la tupla
\end_layout

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cuando se termina de utilizar el scan hay que acordarse de hacer un close:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

scan.close();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Evaluación del componente
\end_layout

\begin_layout Standard

\emph on
Iterator
\emph default
 ofrece una interfaz poco practica para el uso frecuente.
 Mucha funcionalidad esta repetida, como la proyeccion, que simplemente
 se podria implementar como otro iterador.
 Tambien resulta incomoda la construccion de un iterador por la cantidad
 de estructuras de datos que hay que generar.
 Igualmente esto se debe a pobre diseño de las clases y su modularización
 a favor de un estilo que se encuentra, por lo general, en programas escritos
 en C.
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
