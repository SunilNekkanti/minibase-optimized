#LyX 1.4.2 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1cm
\topmargin 3cm
\rightmargin 1cm
\bottommargin 3cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Section
BufferManager
\end_layout

\begin_layout Subsection
Descripción general
\end_layout

\begin_layout Standard
El Buffer Manager es la estructura encargada de traer páginas de memoria
 secundaria a memoria principal sin la necesidad de leerlas desde la memoria
 secundaria constantemente.
 Para este propósito, posee una colección frames, que son los encargados
 de alojar las páginas en la memoria principal.
 Este mecanismo permite traer páginas desde el disco y brindarle a las clases
 superiores los métodos necesarios para mantenerlas en memoria hasta que
 digan lo contrario.
 
\end_layout

\begin_layout Standard
Las páginas removidas del Buffer serán grabadas en el disco sólo en caso
 de haber sido modificadas.
 Para elegir qué página remover se utiliza un algoritmo de remoción de páginas
 entre las implementaciones de Minibase: Clock, LRU y MRU.
\end_layout

\begin_layout Standard
Para marcar cuando una pagina fue modificada, estas cuentan con una marca
 indicando si han sido modificadas ( dirty ).
 Luego, antes de remover la página de memoria, el Buffer Manager la persiste
 (llamando al DiskSpace Manager) en caso de estar marcada, para evitar que
 se pierdan los cambios realizados.
\end_layout

\begin_layout Standard
Cuando se desea acceder o modificar una tabla, se le pide al Buffer Manager
 que traiga las páginas correspondientes a memoria, en caso de no encontrase
 allí con anterioridad.
 Estas páginas serán marcadas ( pin ) mientras se esté operando con ellas
 y luego se liberarán( unpin ) para que sean candidatas para la remoción.
 
\end_layout

\begin_layout Standard
El Buffer Manager contiene métodos para obtener una página, liberarla, crearla,
 borrarla, saber si se encuentra en memoria y guardar las páginas que fueron
 modificadas.
 Para la mayoría de ellos, luego de realizar las acciones necesarias, se
 llama al DiskSpace Manager para que persista los resultados.
 
\end_layout

\begin_layout Subsubsection
Diseño interno, estructuras
\end_layout

\begin_layout Paragraph
Buffer
\emph on
 
\emph default
pool
\end_layout

\begin_layout Standard
El buffer pool es una collección de frames ( secuencia de páginas de tamaño
 fijo que se encuentran en memoria principal )
\end_layout

\begin_layout Paragraph
Descriptores
\end_layout

\begin_layout Standard
Adicionalmente, se mantiene un arreglo de descriptores, uno por cada frame.
 Cada descriptor tiene los siguientes campos:
\end_layout

\begin_layout Itemize
numero de pagina (PageId) 
\end_layout

\begin_layout Itemize
pin count (entero) 
\end_layout

\begin_layout Itemize
dirtybit (bool) 
\end_layout

\begin_layout Standard
Esto describe la página que es guardada en el frame.
 Una página es identificada por un número de página que es generado por
 DM cuando la página es alojada, y es único en toda la base de datos.
 
\end_layout

\begin_layout Paragraph
Directorio de búsqueda ( tabla de hash )
\end_layout

\begin_layout Standard
Para identificar que páginas de disco están en el Buffer Manager se utiliza
 un directorio.
 Éste consiste en una tabla de hash que se encuentra en memoria principal
 y que utiliza un arreglo de <numero de pagina, numero de frame>.
 Dado un número de página, se puede aplicar la función de hash para encontrar
 el bucket correspondiente a esa página.
 Luego se recorre el bucket, buscando la página.
 Si se encuentra, tendrá un frame asociado, caso contrario, la página no
 está en el buffer pool.
\end_layout

\begin_layout Standard
Cuando se solicita una página, el buffer manager debe hacer lo siguiente:
\end_layout

\begin_layout Itemize
Buscar en el buffer pool (usando la tabla de hash) para ver si contiene
 la pagina solicitada.
 
\end_layout

\begin_layout Itemize
Si la pagina no está en el buffer pool:
\end_layout

\begin_deeper
\begin_layout Enumerate
Elegir un frame en dónde se guardará ésta página, utilizando las políticas
 de remoción (Clock, MRU o LRU) 
\end_layout

\begin_layout Enumerate
Si el frame elegido tiene una página que ha sido modificada( dirty= true
 ), se deben escribir los datos de esa página en el disco, mediante DM.
 
\end_layout

\begin_layout Enumerate
Se lee la página solicitada desde disco(otra vez, llamando al DM) y se ubica
 dentro del frame elegido.
\end_layout

\begin_layout Enumerate
Se borra la entrada para la página vieja en el directorio del Buffer Manager
 ( tabla de hash ) y se inserta una entrada para la página nueva.
 
\end_layout

\end_deeper
\begin_layout Itemize
Tambien, se actualiza la entrada para este frame en el arreglo de descriptores.
 
\end_layout

\begin_layout Itemize
Se pincha( pin ) la página requerida.
\end_layout

\begin_layout Subsection
Clases principales y sus protocolos principales
\end_layout

\begin_layout Subsubsection
FrameDesc
\end_layout

\begin_layout Standard
Es una clase que describe un frame.
 Describe cada página que está en el buffer pool: el número de página en
 el archivo, si esta marcada como modificada( dirty ) y sus pin count.
 El pin count cambia cuando se pincha ( pin ) o despincha ( unpin ) una
 página.
\end_layout

\begin_layout Subsubsection
BufHTEntry
\end_layout

\begin_layout Standard
Es el nodo que se utiliza para representar una lista simplemente encadenada,
 que es guardada en los buckets de la tabla de hash.
 Guarda informacion sobre:
\end_layout

\begin_layout Itemize
el número de página 
\end_layout

\begin_layout Itemize
el número de frame en donde está esa página 
\end_layout

\begin_layout Itemize
y tiene un puntero a la próxima entrada.
 
\end_layout

\begin_layout Subsubsection
BufHashTbl
\end_layout

\begin_layout Standard
Una tabla de hash para mantener el seguimiento de las páginas que están
 en el buffer pool( memoria principal ) Sus funciones son insertar, obtener
 y remover páginas de la tabla de hash.
\end_layout

\begin_layout Standard

\series bold
Función de hash:
\series default
 pageNo.pid % HTSIZE
\end_layout

\begin_layout Standard
El tamaño de la tabla es fijo ( establecido en 20 por defecto )
\end_layout

\begin_layout Standard
Cada bucket mantiene una lista enlazada de BufHTEntrys, NULL significa que
 no hay nada.
\end_layout

\begin_layout Standard
Posee métodos para buscar, insertar y eliminar.
\end_layout

\begin_layout Subsubsection
BufMgr
\end_layout

\begin_layout Standard
Los atributos miembro son básicamente los mencionados anteriormente más
 un replacer y el buffer físico( un arreglo en dónde se guardan físicamente
 las páginas en memoria principal )
\end_layout

\begin_layout Standard
Tiene métodos para guardar explícitamente las páginas en disco, para obtener
 una página y marcarla, para desmarcarla y para eliminarla del disco.
\end_layout

\begin_layout Subsubsection
Replacer
\end_layout

\begin_layout Standard
Esta interfaz se asocia con el algoritmo de reemplazo.
 Describe que frame debe ser elegido para su remoción.
 Minibase implementa esta interfaz con las clases Clock, LRU y MRU.
\end_layout

\begin_layout Subsection
Interacción con otros componentes
\end_layout

\begin_layout Standard
El Buffer Manager interactúa fuertemente con el Disk Manager, al cual le
 pide que lea y escriba páginas en disco.
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
