#LyX 1.4.2 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble
 
\end_preamble
\language spanish
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1cm
\topmargin 3cm
\rightmargin 1cm
\bottommargin 3cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Section
SpeedJoin
\end_layout

\begin_layout Subsection
Explicación
\end_layout

\begin_layout Standard
SpeedJoin es una estrategia de join que utiliza la existencia de un índice
 en la relación 
\begin_inset Quotes eld
\end_inset

interna
\begin_inset Quotes erd
\end_inset

 para acelerar el tiempo de procesamiento del mismo.
\end_layout

\begin_layout Standard
El pseudocódigo de un recorrido completo sobre el SpeedJoin es el siguiente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

Para cada tupla de la relacion externa
\end_layout

\begin_layout Standard

   Buscar en el indice todos las tuplas de la relacion interna que contengan
\end_layout

\begin_layout Standard

   el valor con el cual se hace join 
\end_layout

\begin_layout Standard

      Procesar(tupla externa, tupla interna) 
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
A simple vista es similar a un NestedLoopsJoin.
 La diferencia principal entre ambos, es que en vez de iterar la relación
 interna de principio a fin, solo lo hace dentro de los valores que necesita,
 ya que utiliza el índice para extraer eficientemente dichos límites.
\end_layout

\begin_layout Subsection
Implementación
\end_layout

\begin_layout Standard
El constructor del join recibe principalmente 5 parámetros (en la implementación
 real son más, ya que datos que corresponden al mismo parámetro se envían
 por separado).
\end_layout

\begin_layout Itemize
Relación externa: La relación que se iterará.
 Aquí se acepta en realidad cualquier iterador, por lo que la relación externa
 podría provenir de un join, proyección, etc.
 
\end_layout

\begin_layout Itemize
Elemento de la relación externa que participará del join
\end_layout

\begin_layout Itemize
Relación interna: La relación cuyo índice será utilizado.
 Cabe aclarar que no puede provenir de otro join o proyección, ya que se
 necesita acceder al índice directamente y no usando otros iteradores
\end_layout

\begin_layout Itemize
Índice a utilizar: El índice de la relación interna
\end_layout

\begin_layout Itemize
Proyección a realizar: Se refiere a que campos se enviarán en la tupla de
 salida y en que orden 
\end_layout

\begin_layout Standard
En el código las partes mas importantes son:
\end_layout

\begin_layout Paragraph
getnext()
\newline

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

(1) KeyClass rightValue = new IntegerKey(outertuple.getIntFld(joincol1));
\end_layout

\begin_layout Standard

(2) inner = IndexUtils.BTreescan(rightValue,rightValue,innerIndexFile); 
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cuando se agotan las tuplas de la relación interna, se avanza iterando la
 relación externa y luego realizando una búsqueda en el índice de la relación
 interna.
 En la primera línea del código se extrae el elemento de la relación externa
 que será utilizada para el join.
 
\end_layout

\begin_layout Standard
En la segunda, se realiza una búsqueda en el índice de la relación interna.
 Notar que se envía dos veces el parámetro 
\emph on
RightValue
\emph default
, ya que los índices permiten escanear rangos de valores aparte de coincidencias
 exactas.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

(1) while ((innerdata = inner.getnext()) != null){
\end_layout

\begin_layout Standard

(2)    rid = ((LeafData)innerdata.data).getData();
\end_layout

\begin_layout Standard

(3)    innertuple= hf.getRecord(rid);
\end_layout

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este es el código que se encarga de iterar el índice de la relación interna.
 En la línea 1, se pide al índice el próximo valor a analizar.
 Luego se extrae del índice el valor RID correspondiente a dicha posición
 del índice.
 Por último, se busca en la relación interna la tupla correspondiente al
 RID devuelto por el índice.
\end_layout

\begin_layout Subsection
Pruebas y mediciones.
\end_layout

\begin_layout Standard
Para realizar pruebas y mediciones sobre la performance de esta estrategia
 de join, se creo la clase JoinSpeedTest.
 En ésta, se realiza de tres formas distintas
\end_layout

\begin_layout Standard
la siguiente Query:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

Find the names of sailors who have reserved a boat and print each name once.
 
\end_layout

\begin_layout Standard

SELECT DISTINCT S.sname 
\end_layout

\begin_layout Standard

FROM Sailors S, Reserves R
\end_layout

\begin_layout Standard

WHERE S.sid = R.sid
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Éstas tres formas, son las estrategias de join que se encuentran implementadas
 en NestedLoopsJoin y SortMergeJoin, incluidas en la versión original de
 Minibase, y SpeedJoin, implementada en el presente trabajo.
\end_layout

\begin_layout Subsubsection
Métrica de medición
\end_layout

\begin_layout Standard
Para poder comparar las distintas estrategias teníamos varias alternativas.
\end_layout

\begin_layout Itemize
Medir el tiempo transcurrido 
\end_layout

\begin_layout Itemize
Medir la cantidad de llamados a getnext 
\end_layout

\begin_layout Itemize
Medir la cantidad de accesos a disco 
\end_layout

\begin_layout Standard
La primer posibilidad era poco practica, ya que al estar realizando otras
 tareas el sistema operativo mientras corremos los tests, los resultados
 pueden verse afectados por situaciones ajenas a Minibase.
 
\end_layout

\begin_layout Standard
La última posibilidad es quizás la mejor indicadora del costo del join.
 Sin embargo, la cantidad de llamados a getnext es una buena aproximación
 del costo del join, y es bastante más simple de implementar.
 Es por ello que optamos por esta última opción.
\end_layout

\begin_layout Subsubsection
Implementación
\end_layout

\begin_layout Standard
Para obtener estadísticas de los getnext llamados durante los distintos
 joins teníamos 2 opciones.
\end_layout

\begin_layout Itemize
Enviar un parámetro por referencia al join y que lo devuelva sumando la
 cantidad de getnext utilizados.
 
\end_layout

\begin_layout Itemize
Utilizar una variable global a la que cada vez que se realiza getnext es
 incrementada en 1.
 
\end_layout

\begin_layout Standard
La primera opción es quizás la m'as 
\begin_inset Quotes eld
\end_inset

elegante
\begin_inset Quotes erd
\end_inset

, pero lleva a modificar todos los protocolos para obtener una estadística
 utilizada solo para realizar pruebas.
 Por lo tanto nos decidimos por la segunda opción.
 De este modo se agrego a las tres estrategias de join, la linea:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

SystemDefs.estadisticas++;
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
cada vez que se realiza un llamado a getnext
\end_layout

\begin_layout Subsubsection
Análisis teórico de las mediciones
\end_layout

\begin_layout Standard
En principio las relaciones a las cuales se les aplicará el join son:
\end_layout

\begin_layout Itemize
sailors.in Tiene 25 elementos 
\end_layout

\begin_layout Itemize
reserves.in Tiene 10 elementos, pero solo 6 sid distintos.
 Los 10 elementos tienen un correspondiente sid en la tabla sailors.
 
\end_layout

\begin_layout Standard
La parte de eliminación de duplicados es común a los 3 joins, analicemos
 cuantos getnext deberían hacer aproximadamente.
\end_layout

\begin_layout Paragraph
Eliminación de duplicados
\newline

\end_layout

\begin_layout Standard
Recibe una relación con 10 elementos.
 Para ordenarla hace 10 getnext (para obtenerlos).
 Luego de ello quedan 6 elementos distintos, por lo que al iterarlos se
 utilizarán 6 getnext más.
 En total son 16 getnext.
\end_layout

\begin_layout Paragraph
NestedLoopsJoin
\newline

\end_layout

\begin_layout Standard
Recordemos que itera todas las combinaciones de tupla interna y externa,
 por lo que debe realizar 10*25 = 250 getnext.
 Sumando la eliminación de duplicados da 276 getnext
\end_layout

\begin_layout Paragraph
SortMergeJoin
\newline

\end_layout

\begin_layout Standard
Aquí se iteran completamente las dos relaciones para ordenarlas.
 Luego se vuelven a iterar para hacer el merge (en realidad es posible que
 no se iteren las 2 hasta el final debido a que se puede 
\begin_inset Quotes eld
\end_inset

acabar
\begin_inset Quotes erd
\end_inset

 una de las dos relaciones antes que la otra, por lo que se termina el merge
 sin iterar completamente una de las dos).
 Y por último se eliminan los duplicados.
 Es en total (25 + 10) * 2 + 16 = 86 getnext.
\end_layout

\begin_layout Paragraph
SpeedJoin
\newline

\end_layout

\begin_layout Standard
Aquí se itera completamente la relación externa, y de la relación interna
 solo se iteran las tuplas que coinciden en sid con la tupla externa iterada.
 Como todas las tuplas de la relación interna (reserves.in) coinciden en
 sid con solo una tupla de la relación externa (sailors.in que tiene como
 pk a sid), en total se van a iterar (en algún orden) todas las tuplas de
 esta relación interna.
 Sumándole la eliminación de duplicados da 25 + 10 + 15 = 51
\end_layout

\begin_layout Subsubsection
Resultado de las mediciones
\end_layout

\begin_layout Standard
Al correr las pruebas se obtienen los siguientes resultados.
\end_layout

\begin_layout Paragraph
[extracto del output de la corrida del test]
\newline

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

SortMergeJoin hace 87 getnext 
\end_layout

\begin_layout Standard

SpeedJoin hace 48 getnext 
\end_layout

\begin_layout Standard

NestedLoopsJoin hace 288 getnext
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lo que demuestra en este caso que SpeedJoin es la opción más rápida.
\end_layout

\begin_layout Standard
Si en sailors.in hubiese habido sid repetidos, entonces SpeedJoin hubiese
 iterado más de una vez los valores de la relación interna, por lo que sus
 estadísticas se hubieran acercado más a las del SortMergeJoin.
\end_layout

\begin_layout Standard
Llegado al extremo de que todos los sid de sailors y reserves fueran iguales,
 SpeedJoin hubiese tardado lo mismo que el NestedLoopsJoin ya que se hubiesen
 tenido que iterar todas las combinaciones de las dos tablas.
\end_layout

\end_body
\end_document
